using System;
using Emul8.Core;
using Emul8.Exceptions;
using Microsoft.Scripting.Hosting;

namespace EntryProject_AutoGenerated
{
    static class MonitorExecutorExtensions
    {
        public static void ExecutePythonEvery(this Machine machine, int seconds, string script)
        {
            var engine = new ExecutorPythonEngine(machine, script, seconds);

            try
            {
                machine.ExecuteIn(engine.Action, TimeSpan.FromSeconds(seconds));
            }
            catch(InvalidOperationException e)
            {
                throw new RecoverableException(e);
            }
        }
    }

    public sealed class ExecutorPythonEngine : PythonEngine
    {
        public ExecutorPythonEngine(Machine mach, string script, int seconds)
        {
            Script = script;
            Machine = mach;

            InnerInit();
            Action = () =>
            {
                Source.Value.Execute(Scope);
                mach.ExecuteIn(Action, TimeSpan.FromSeconds(seconds));
            };

        }

        private void InnerInit()
        {
            Scope.SetVariable("machine", Machine);
            Source = new Lazy<ScriptSource>(() => Engine.CreateScriptSourceFromString(Script));
        }

        public Action Action { get; private set; }

        private Lazy<ScriptSource> Source;
        private readonly string Script;
        private readonly Machine Machine;
    }
}
